{
  parserClass="org.intellij.sdk.language.parser.SimpleCobolParser"
  parserUtilClass="org.intellij.sdk.language.parser.SimpleCobolParserUtil"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  psiClassPrefix="SimpleCobol"
  psiImplClassSuffix="Impl"
  psiPackage="org.intellij.sdk.language.psi"
  psiImplPackage="org.intellij.sdk.language.psi.impl"
  elementTypeHolderClass="org.intellij.sdk.language.psi.SimpleCobolTypes"
  elementTypeClass="org.intellij.sdk.language.psi.SimpleCobolElementType"
  tokenTypeClass="org.intellij.sdk.language.psi.SimpleCobolTokenType"
}

cobolFile ::= simple-cobol-source-program*

simple-cobol-source-program ::= LINE IDENTIFICATION DIVISION DOT DEL? program-id-cobol-source-program
                                [LINE DATA DIVISION DOT DEL? data-division-content]
                                [LINE procedure-division]
                                DEL*

//=========================== IDENTIFICATION ===========================
program-id-cobol-source-program  ::= LINE PROGRAM_ID [DOT] USER_DEFINED_WORD [DOT] DEL?

//=========================== DIVISION ===========================
data-division-content ::= [LINE WORKING_STORAGE SECTION DOT DEL? {data-description-entry}* DEL?]

data-description-entry ::= LINE LEVEL_NUMBER [USER_DEFINED_WORD] data-description-entry-clauses DOT

data-description-entry-clauses ::= picture-clause+ {data-value-clause}*
picture-clause    ::= PIC picture-string
picture-string    ::= (PICCHAR+ REPEAT?)+
data-value-clause ::= VALUE NUMERIC

//=========================== PROCEDURE ===========================
procedure-division ::= PROCEDURE DIVISION DOT sections
sections ::= {sentence}*{DEL? paragraph}*

sentence ::= statement-list DOT
paragraph ::= LINE USER_DEFINED_WORD DOT {sentence}*

statement-list ::= {DEL? statement}+
statement ::= (display-statement | perform-statement | stop-run-statement)

stop-run-statement ::= LINE STOP RUN

display-statement ::= LINE DISPLAY {(identifier | literal)}+
identifier  ::= USER_DEFINED_WORD
literal  ::=  (NUMERIC | FIGURATIVE_CONSTANT)

perform-statement ::= LINE PERFORM USER_DEFINED_WORD perform-varying-phrase
basis ::= (identifier | literal)
perform-varying-phrase ::= VARYING identifier FROM basis BY basis UNTIL condition
condition ::= basis EQUAL basis